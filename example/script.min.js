(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _script = require('./script');

var _judge = require('./judge');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CreateField = function () {
  function CreateField(cell) {
    _classCallCheck(this, CreateField);

    this.cell = cell;
  }

  _createClass(CreateField, [{
    key: 'createArray',
    value: function createArray(x, y) {
      this.x = x;
      this.y = y;
      this.array = new Array(y).fill(0).map(function (elem) {
        return new Array(x).fill(0);
      });
      return this.array;
    }
  }, {
    key: 'createCanvasField',
    value: function createCanvasField() {
      var _this = this;

      if (!this.x || !this.y) return;
      var canvas = document.querySelector('#canvas') || function (_) {
        var canvas = document.createElement('canvas');
        canvas.id = 'canvas';
        document.body.appendChild(canvas);
        return canvas;
      }();
      this.canvas = canvas;
      this.width = canvas.width = 1 + this.x * (this.cell + 1);
      this.height = canvas.height = 1 + this.y * (this.cell + 1);
      this.ctx = canvas.getContext('2d');
      canvas.onclick = function (e) {
        return _this.canvasClick(e);
      };
      this.refreshField();
    }
  }, {
    key: 'refreshField',
    value: function refreshField() {
      var _this2 = this;

      this.ctx.clearRect(0, 0, this.width, this.height);
      this.ctx.fillStyle = 'green';
      this.ctx.fillRect(0, 0, this.width, this.height);
      this.array.forEach(function (el, i) {
        el.forEach(function (cell, j) {
          var x = 1 + j * (_this2.cell + 1);
          var y = 1 + i * (_this2.cell + 1);
          _this2.createCell(x, y);
          y += _this2.cell + 1;
          if (cell === 'X') _this2.writeX(x, y);
          if (cell === 'O') _this2.writeO(x, y);
        });
      });
    }
  }, {
    key: 'createCell',
    value: function createCell(x, y) {
      // this.ctx.fillStyle = 'yellow';
      this.ctx.clearRect(x, y, this.cell, this.cell);
    }
  }, {
    key: 'writeX',
    value: function writeX(x, y) {
      this.ctx.font = '28px arial';
      this.ctx.fillStyle = 'blue';
      this.ctx.fillText('X', x + 1, y - 1);
    }
  }, {
    key: 'writeO',
    value: function writeO(x, y) {
      this.ctx.font = '28px arial';
      this.ctx.fillStyle = 'red';
      this.ctx.fillText('O', x - 1, y - 1);
    }
  }, {
    key: 'writeLine',
    value: function writeLine(arr) {
      var startX = 1 + arr[0][0] * (this.cell + 1) + this.cell / 2;
      var startY = 1 + arr[0][1] * (this.cell + 1) + this.cell / 2;
      var finishX = 1 + arr[4][0] * (this.cell + 1) + this.cell / 2;
      var finishY = 1 + arr[4][1] * (this.cell + 1) + this.cell / 2;
      var $ = this.ctx;
      $.beginPath();
      $.moveTo(startX, startY);
      $.lineTo(finishX, finishY);
      $.strokeStyle = 'black';
      $.stroke();
    }
  }, {
    key: 'canvasClick',
    value: function canvasClick(e) {
      var _this3 = this;

      var coords = e.target.getBoundingClientRect();
      var x = Math.floor((e.clientX - coords.x + 1) / (this.cell + 1));
      var y = Math.floor((e.clientY - coords.y + 1) / (this.cell + 1));
      if (this.array[y][x] === 'X' || this.array[y][x] === 'O') return false;
      this.array[y][x] = 'X';
      this.refreshField();
      var solution = (0, _judge.judge)(x, y, 'X', this.array);
      if (solution) {
        this.writeLine(solution);
        this.canvas.onclick = null;
        return false;
      };
      setTimeout(function (_) {
        return _this3.stepOfComp();
      }, 0);
    }
  }, {
    key: 'stepOfComp',
    value: function stepOfComp() {
      var step = (0, _script.doChoose)('O', 'X', this.array);
      // console.log(step.rating);
      this.array[step.y][step.x] = 'O';
      this.refreshField();
      var solution = (0, _judge.judge)(step.x, step.y, 'O', this.array);
      if (solution) {
        this.writeLine(solution);
        this.canvas.onclick = null;
      };
    }
  }]);

  return CreateField;
}();

;

exports.default = new CreateField(20);

},{"./judge":2,"./script":3}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var judge = exports.judge = function judge(x, y, player, arr) {
  var result = void 0;
  var arrayValues = new Array(8).fill([[x, y]]);
  for (var i = 1; i < 5; i++) {
    if (arr[y - i] && arr[y - i][x + i] && arr[y - i][x + i] === arr[y][x]) arrayValues[0] = [].concat(_toConsumableArray(arrayValues[0]), [[x + i, y - i]]);
    if (arr[y][x + i] && arr[y][x + i] === arr[y][x]) arrayValues[1] = [].concat(_toConsumableArray(arrayValues[1]), [[x + i, y]]);
    if (arr[y + i] && arr[y + i][x + i] && arr[y + i][x + i] === arr[y][x]) arrayValues[2] = [].concat(_toConsumableArray(arrayValues[2]), [[x + i, y + i]]);
    if (arr[y + i] && arr[y + i][x] && arr[y + i][x] === arr[y][x]) arrayValues[3] = [].concat(_toConsumableArray(arrayValues[3]), [[x, y + i]]);
    if (arr[y + i] && arr[y + i][x - i] && arr[y + i][x - i] === arr[y][x]) arrayValues[4] = [].concat(_toConsumableArray(arrayValues[4]), [[x - i, y + i]]);
    if (arr[y][x - i] && arr[y][x - i] === arr[y][x]) arrayValues[5] = [].concat(_toConsumableArray(arrayValues[5]), [[x - i, y]]);
    if (arr[y - i] && arr[y - i][x - i] && arr[y - i][x - i] === arr[y][x]) arrayValues[6] = [].concat(_toConsumableArray(arrayValues[6]), [[x - i, y - i]]);
    if (arr[y - i] && arr[y - i][x] && arr[y - i][x] === arr[y][x]) arrayValues[7] = [].concat(_toConsumableArray(arrayValues[7]), [[x, y - i]]);
  };
  arrayValues.forEach(function (elem) {
    if (elem.length === 5) result = elem;
  });
  return result;
};

},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.doChoose = undefined;

var _canvas = require('./canvas');

var _canvas2 = _interopRequireDefault(_canvas);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var defineBestPosition = function defineBestPosition(mine, enemy, arr) {

  var getRandomNumber = function getRandomNumber(min, max) {
    return Math.round(min - 0.5 + Math.random() * (max - min + 1));
  };

  var countDirections = function countDirections(arr, x, y) {
    var horizontal = [mine];
    var vertical = [mine];
    var leftRight = [mine];
    var rightLeft = [mine];
    var a = void 0,
        b = void 0,
        c = void 0,
        d = void 0,
        e = void 0,
        f = void 0,
        j = void 0,
        g = void 0;
    for (var i = 1; i < 5; i++) {
      if (x - i >= 0 && arr[y][x - i] !== enemy && !a) {
        horizontal.unshift(arr[y][x - i]);
      } else a = 1;
      if (x + i < arr[y].length && arr[y][x + i] !== enemy && !b) {
        horizontal.push(arr[y][x + i]);
      } else b = 1;
      if (y - i >= 0 && arr[y - i][x] !== enemy && !c) {
        vertical.unshift(arr[y - i][x]);
      } else c = 1;
      if (y + i < arr.length && arr[y + i][x] !== enemy && !d) {
        vertical.push(arr[y + i][x]);
      } else d = 1;
      if (y - i >= 0 && x - i >= 0 && arr[y - i][x - i] !== enemy && !e) {
        leftRight.unshift(arr[y - i][x - i]);
      } else e = 1;
      if (y + i < arr.length && x + i < arr[y + i].length && arr[y + i][x + i] !== enemy && !f) {
        leftRight.push(arr[y + i][x + i]);
      } else f = 1;
      if (y - i >= 0 && x + i < arr[y - i].length && arr[y - i][x + i] !== enemy && !j) {
        rightLeft.unshift(arr[y - i][x + i]);
      } else j = 1;
      if (y + i < arr.length && x - i >= 0 && arr[y + i][x - i] !== enemy && !g) {
        rightLeft.push(arr[y + i][x - i]);
      } else g = 1;
    };
    return { cell: [x, y], horizontal: horizontal, vertical: vertical, leftRight: leftRight, rightLeft: rightLeft };
  };

  var checkAround = function checkAround(arr, x, y) {
    var result = [];
    for (var i = x - 1; i <= x + 1; i++) {
      if (arr[y - 1] && i < arr[y - 1].length && i >= 0 && arr[y - 1][i] !== enemy && arr[y - 1][i] !== mine) {
        result.push(countDirections(arr, i, y - 1));
      };
    };
    if (x + 1 < arr[y].length && arr[y][x + 1] !== enemy && arr[y][x + 1] !== mine) {
      result.push(countDirections(arr, x + 1, y));
    };
    for (var _i = x + 1; _i >= x - 1; _i--) {
      if (arr[y + 1] && _i < arr[y + 1].length && _i >= 0 && arr[y + 1][_i] !== enemy && arr[y + 1][_i] !== mine) {
        result.push(countDirections(arr, _i, y + 1));
      };
    };
    if (x - 1 >= 0 && arr[y][x - 1] !== enemy && arr[y][x - 1] !== mine) {
      result.push(countDirections(arr, x - 1, y));
    };
    return result;
  };

  var mainArray = function mainArray(arr) {
    var main = [];
    arr.forEach(function (elem, i) {
      elem.forEach(function (cell, j) {
        if (cell === mine) {
          main = [].concat(_toConsumableArray(main), _toConsumableArray(checkAround(arr, j, i)));
        };
      });
    });
    return main.filter(function (obj, i, main) {
      for (var j = i + 1; j < main.length; j++) {
        if (obj.cell.toLocaleString() === main[j].cell.toLocaleString()) return false;
      };
      return true;
    });
  };
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
  var arraysAnalyze = function arraysAnalyze(smallArray) {
    var rating = 0;
    var first = smallArray.findIndex(function (elem) {
      return elem === mine;
    });
    var last = smallArray.length - 1 - smallArray.slice().reverse().findIndex(function (elem) {
      return elem === mine;
    });
    if (last - first < 5) {
      var after = smallArray.length - 1 - last;
      if (last + after < 4) return rating;
      rating += smallArray.filter(function (el) {
        return el === mine;
      }).length;
      if (rating === 4 && first >= 1 && after >= 1) rating += 0.5;
      return rating;
    } else {
      var res1 = arraysAnalyze(smallArray.slice(first + 1));
      var res2 = arraysAnalyze(smallArray.splice(0, last));
      return res1 >= res2 ? res1 : res2;
    }
  };

  var defineRatingEveryCell = function defineRatingEveryCell(obj) {
    var rating = [];
    for (var key in obj) {
      if (key !== 'cell') {
        rating.push(arraysAnalyze(obj[key]));
      };
    };
    rating = rating.sort(function (a, b) {
      return b - a;
    }).filter(function (el, i, arr) {
      return el === arr[0] ? 1 : 0;
    });
    // hard level
    if (rating.length >= 2 && rating[0] === 3) {
      rating = 3.1;
      // console.log(`Cross = ${rating}`);
    } else if (rating.length >= 2 && rating[0] === 4) {
      rating = 4.2;
    } else {
      rating = rating[getRandomNumber(0, rating.length - 1)];
    };
    //
    // rating = rating[getRandomNumber(0, rating.length - 1)];
    //
    obj.rating = rating;
    return obj;
  };
  console.log(mainArray(arr).map(defineRatingEveryCell).sort(function (a, b) {
    return b.rating - a.rating;
  }));
  var totalArray = mainArray(arr).map(defineRatingEveryCell).sort(function (a, b) {
    return b.rating - a.rating;
  }).filter(function (el, i, arr) {
    return el.rating === arr[0].rating ? 1 : 0;
  });
  var result = totalArray[getRandomNumber(0, totalArray.length - 1)];

  return result ? { x: result.cell[0], y: result.cell[1], rating: result.rating } : { x: getRandomNumber(arr[0].length / 4, arr[0].length * 3 / 4), y: getRandomNumber(arr.length / 4, arr.length * 3 / 4), rating: 0 };
};

var doChoose = exports.doChoose = function doChoose(mine, enemy, arr) {
  var bestMine = defineBestPosition(mine, enemy, arr);
  var bestEnemy = defineBestPosition(enemy, mine, arr);
  // junior level
  // if (bestEnemy.rating < 3.5 || bestMine.rating >= 3.5 && bestEnemy.rating < 5) {
  //   return bestMine;
  // } else {
  //   return bestEnemy;
  // }
  // middle level
  if (bestMine.rating === 0) return bestEnemy;
  if (bestMine.rating === 5) return bestMine;
  // if (bestEnemy.rating >= 3 && bestEnemy.rating <= 4 && bestMine.rating < 4.5) return bestEnemy;
  if (bestEnemy.rating > 4 && bestEnemy.rating < 4 && bestMine.rating < 4.5) return bestEnemy;
  if (bestEnemy.rating >= 4.5) return bestEnemy;

  return bestMine;
  //
};

_canvas2.default.createArray(20, 10);
_canvas2.default.createCanvasField();

console.log(0 >= undefined);
// (pay > cost) && pay !== undefined && cost !== undefined

},{"./canvas":1}]},{},[3]);
